Markov State Model
#######################

cluster
============

2-dimensional array
----------------------
The tested data are points distributed in a circle :download:`data.txt<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\data.txt>`.

::

     -0.35941231475718038      0.84237709893632018
     -9.4136931521054706E-002  0.69380591026773419
      0.67511592876630078      0.17903400140936512
      0.62728929764629149      9.4346468131488476E-002
     -5.9843035099675884E-004 -0.56974671645607766
     ...

There are a total of 100,000 rows of data. They are clustered to 100 states by kmeans. The input file named "cluster.in" is shown below:

::

    &cluster
        ncluster=100, clustermethod="kmeans", datafile="data.txt", ndim=2, nsnap=100000
    /

::

    > fsatool msm cluster

The clustering results are stored in "cluster.out" by default. The output file as shown below:

=============   =================
cluster index   CenterSnap index
=============   =================
          80       25479
          56       41168
          14       58238
          34       18268
          94       55611
=============   =================

- **cluster index** : the cluster index to which the frams belongs.

- **CenterSnap Index** : the center snap index of current cluster.

This script can draw the clustering results in different colors :download:`plot.py.txt<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\plot.py>`.
The center of each cluster is marked with the symbol "X".

::

  > python plot.py cluster.out 

.. figure:: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_2d.png
   :target: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_2d.png
   :align: center
   :scale: 40%

   The clustering result.

Coordinates Clustering
-------------------------
:download:`test.nc<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\test.nc>`

:download:`protein.prmtop<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\protein.prmtop>`

This trajectory has 1000 snapshots. They are clustered to 10 states by calculating the distance matrix: 

::

    &cluster
        ncluster=10, clustermethod="coordinate", datafile="test.nc", trajtype=2, nsnap=1000, ndim=1512
    /

This molecular has 504 atoms, and ``ndim`` is set to three times the atomic number.

::

    > fsatool msm cluster

The "cluster.out" file is similar as before. In addition, the snapshots in each state are stored in different files named 
"cluster_*.nc".

We provide some simple scripts to show the representive structure of each 
state :download:`plot_network.py <C:\\Users\\zhz\\Desktop\\sphinx\\files\\trpzip2\\plot_network.py>`.
The gray lines represent different Backbone forms, and the Cartoon
structure shows the center structure in this cluster.

::

  > python vmd_show.py -p protein.prmtop -t cluster_1.nc 

.. figure:: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_1.png
   :target: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_1.png
   :align: left
   :scale: 73%

   The representive structure of cluster_1. 

.. figure:: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_2.png
   :target: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\cluster_2.png
   :align: right
   :scale: 68%

   The representive structure of cluster_2. 

========

The input file "check.in":

::

    &check
        checkmethod="timescales", datafile="cluster_forcheck.txt",
        lagstart=10, lagend=60, lagOffset=5, nits=5
    /

Implied timescale calculated by FSATOOL.

=============   ==========   ========    ========    ========
lagStep         it1          it2         it3         it4
=============   ==========   ========    ========    ========
  15             7.725447    6.623587    5.942975    5.753566
  20             7.940380    6.831861    6.127305    5.926501
  25             8.105325    6.993178    6.271476    6.066478
  30             8.243472    7.124332    6.389506    6.180738
  35             8.358990    7.237307    6.495447    6.285877
  40             8.459769    7.333163    6.585856    6.377492
  45             8.549108    7.419754    6.667117    6.461862
  50             8.628374    7.497285    6.740015    6.531859
  55             8.704886    7.569782    6.806971    6.593791
  60             8.770139    7.633589    6.867345    6.649341

=============   ==========   ========    ========    ========

We use *PYEMMA* software as a comparison. The execution script of the **check** module can be downloaded here :download:`test_pyemma_impilied_scale.py<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\test_pyemma_impilied_scale.py>`.
After running this script, we got a file called :download:`pyemma_impliled_timescale.txt<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\pyemma_impliled_timescale.txt>`. You can see that they got the same result.

.. figure:: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\FSATOOL_timescale1.png
   :target: C:\\Users\\zhz\\Pictures\\sphinx\\msm\\FSATOOL_timescale1.png
   :align: center
   :scale: 50%

   Implied timescale calculated by Pyemma.

lumping
========
The file of tpm matrix for lumping can be download by clicking :download:`tpmlarge.txt<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\tpmlarge.txt>`

The lumpingmethod we selected here is “pccaplus”, then the data file should contains the transition probability matrix.

::

    &lumping
        datafile = "tpmlarge.txt"
        ncluster=1000
        nstate=10
        lumpingmethod = "pccaplus"
    /

::
    
    > fsatool msm lumping

1000 microstates are lumped into 10 macrostates by PCCA+. The result of lumping is displayed in the terminal:

::

    ********************************************************************************
                                 PCCAplus Coarse Grain
    call Neled-Mead method to minimize the func
    icount, numres:        2147           1
    membership functions:
    cluster index belong to macro states index:
       2   7   4   6   2   8   2   4   3  10   2   2  10   4   8   2   6   7   4   2
       7   2   6   2   6   4   2   1   2   6   2   4   2   3   2   6  10   7   6   2
       5   7   2   2   6   7   8   9   2  10   2   7   4  10   6   4   6   6   1   1
       ... ...

We use MSMtools to test this result. Here is the script for lumping by using 
:download:`msmtools.py<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\msmtools.py>`.

::

    > python msmtools.py 

After running the script, we got a file called :download:`pyemma_pcca_save.json<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\pyemma_pcca_save.json>`. Through comparison, it was found
that the two programs got the same result.

TPT
=======

The input file of **tpt.in** :

::

    &tpt
        tpmfile = "tpm.txt"
        statefile = "states.txt"
        startstate = 25,27,30
        endstate = 20
    /

Enter the following command in the terminal:

::

    > fsatool msm tpt

The results obtained are as follows:

::

                                      TPT Analysis
    number of micro state:       20
    number of macro state:    20
    int state:    1
    end state:   19
    forward committor:   0.00000000  0.16257487  0.24470868  0.08274719  0.12874016  0.15932281  0.13109575  0.12524852  0.14558799  0.12504382  0.07081371  0.13357555  0.13807499  0.14374672  0.01853454  0.15305353  0.24689252  0.13883476  1.00000000  0.04419848
    backward committor:   1.00000000  0.90994333  0.86070723  0.91253659  0.91782543  0.91640115  0.92223424  0.90451847  0.88037993  0.92209524  0.93084023  0.91302472  0.91387084  0.98155024  0.91555195  0.91239316  0.77968695  0.90000616  0.00000000  0.92423617
    pi:   0.061613  0.101604  0.093881  0.000969  0.042196  0.051157  0.042561  0.038505  0.017185  0.023183  0.221250  0.010242  0.003808  0.065487  0.058561  0.044387  0.073224  0.027516  0.018605  0.004066
    totalFlux:   0.00685210
    kAB:   0.00765823
    There are total  51 pathways in the network
    flux     ratio  accumulatedfluxRatio  pathway
      0.1866E-02  0.2723  0.2723     1  3 19
      0.1861E-02  0.2716  0.5438     1 19
      0.4919E-03  0.0718  0.6156     1 17  3 19
      0.3951E-03  0.0577  0.6733     1  7  3 19

We use *PYEMMA* software as a comparison. The execution script of the tpt module can be downloaded here :download:`pyemma_tpt.py<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\pyemma_tpt.py>`.
After running this script, we got a file called :download:`pyemma_tpt_save.json<C:\\Users\\zhz\\Desktop\\sphinx\\files\\msm\\pyemma_tpt_save.json>`. You can see that they got the same result.


    

    





    